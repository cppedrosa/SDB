# Cria Um Disco Com Boot Para Ubuntu 16.04 LTS
- name: create a disk
  gcp_compute_disk:
      name: "{{ item }}"
      size_gb: 10
      source_image: projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
      zone: "{{ gcp_zone }}"
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
      service_account_file: "{{ gcp_cred_file }}"
      state: present
  register: disk
  loop: "{{ disks }}"

# Cria Uma Rede
- name: create a network
  gcp_compute_network:
      name: "sdb-network"
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
      service_account_file: "{{ gcp_cred_file }}"
      state: present
  register: network

# Cria Um Endereço IP Externo Estático
- name: create a address
  gcp_compute_address:
      name: "{{ item }}"
      region: "{{ gcp_region }}"
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
      service_account_file: "{{ gcp_cred_file }}"
      state: present
  register: address
  loop: "{{ addresses }}"

# Cria FireWall e Abre a Porta 22 Para Ligações SSH
- name: create a firewall
  gcp_compute_firewall:
    name: "firewall"
    allowed:
      - ip_protocol: tcp
        ports:
          - 22
          - 80
          - 443
      - ip_protocol: icmp
    network: "global/networks/{{ network.name }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    state: present

# Cria Uma Instância Com Os Objectos Criados Anteriormente
- name: create an instance
  gcp_compute_instance:
    name: "{{ item.tag }}-{{ '%02d' | format(item.index) }}"
    machine_type: "{{ gcp_machine_type }}"
    metadata:
      startup-script:
        # - apt update -y
    tags:
      items: "{{ item.tag }}"
    disks:
    - auto_delete: true
      boot: true
      source: "{{ disk.results[item.index-1] }}"
    network_interfaces:
    - network: "{{ network }}"
      access_configs:
      - name: External NAT
        nat_ip: "{{ address.results[item.index] }}"
        type: ONE_TO_ONE_NAT
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    state: present
  register: instance
  loop: "{{ instances }}"

# Replace 1st WebServer Internal IP in the HAProxy Config File
- name: Replace HAProxy's 1st IP
  replace:
    path: "~/Desktop/UMinho/4º\ Ano/Comp\ SD\ -\ System\ Deployment\ and\ Benchmarking/SDB2018-TP/Fase2/Ghost/haproxy.cfg"
    regexp: 'WEBSERVER1'
    replace: "{{ instance.results[2].networkInterfaces[0].networkIP }}"

# Replace 2nd WebServer Internal IP in the HAProxy Config File
- name: Replace HAProxy's 2nd IP
  replace:
    path: "~/Desktop/UMinho/4º\ Ano/Comp\ SD\ -\ System\ Deployment\ and\ Benchmarking/SDB2018-TP/Fase2/Ghost/haproxy.cfg"
    regexp: 'WEBSERVER2'
    replace: "{{ instance.results[3].networkInterfaces[0].networkIP }}"

# Replace External IP in KeepAlived Config File
- name: Replace KeepAlived's IP's
  replace:
    path: "~/Desktop/UMinho/4º\ Ano/Comp\ SD\ -\ System\ Deployment\ and\ Benchmarking/SDB2018-TP/Fase2/Ghost/keepalived.conf"
    regexp: 'EXTERNALIP'
    replace: "{{ address.results[0].address }}"

# Replace Internal IP in KeepAlived Config File
- name: Replace KeepAlived's IP's
  replace:
    path: "~/Desktop/UMinho/4º\ Ano/Comp\ SD\ -\ System\ Deployment\ and\ Benchmarking/SDB2018-TP/Fase2/Ghost/keepalived.conf"
    regexp: 'INTERNALIP'
    replace: "{{ network.gatewayIPv4 }}"

# Replace WEBSERVER1 Internal IP in KeepAlived Config File
- name: Replace KeepAlived's IP's
  replace:
    path: "~/Desktop/UMinho/4º\ Ano/Comp\ SD\ -\ System\ Deployment\ and\ Benchmarking/SDB2018-TP/Fase2/Ghost/keepalived.conf"
    regexp: 'WEBSERVER1'
    replace: "{{ instance.results[2].networkInterfaces[0].networkIP }}"

# Replace WEBSERVER2 Internal IP in KeepAlived Config File
- name: Replace KeepAlived's IP's
  replace:
    path: "~/Desktop/UMinho/4º\ Ano/Comp\ SD\ -\ System\ Deployment\ and\ Benchmarking/SDB2018-TP/Fase2/Ghost/keepalived.conf"
    regexp: 'WEBSERVER2'
    replace: "{{ instance.results[3].networkInterfaces[0].networkIP }}"

- name: Add hosts to in memory inventory
  add_host:
    name: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
    groups: "{{ item.tags['items'] | join(',') }}"
  loop: "{{ instance.results }}"

- name: Wait for instances to respond
  wait_for:
    host: "{{ item }}"
    port: 22
  loop: "{{ groups['all'] }}"
  